<?php
require_once('leaflet.formatters.inc');

/**
 * Implements hook_requirements().
 */
function leaflet_requirements($phase) {
  $requirements = array();

  // ensure js library is available
  if ($phase == 'runtime' && !file_exists(libraries_get_path('leaflet') . '/leaflet.js')) {
    $requirements['leaflet'] = array(
      'title' => t('Leaflet library not found'),
      'value' => t('The %leaflet javascript library was not found. Please %download it into the libraries folder.', 
        array(
          '%leaflet' => l('Leaflet', 'http://leaflet.cloudmade.com'),
          '%download' => l('download', 'http://leaflet.cloudmade.com/download.html'),          
        )),
      'severity' => REQUIREMENT_ERROR
    );
  }
  
  return $requirements;
}

/**
 * Implements hook_theme().
 */
function leaflet_theme($existing, $type, $theme, $path) {
  return array(
    'leaflet_map' => array(
      'arguments' => array('map_id' => NULL, 'height' => '400px'),
      'template' => 'leaflet_map',
    ),
  );
}

/**
 * Load all required Leaflet files
 */
function leaflet_load_library() {
  static $static_cache = FALSE;
  
  if (!$static_cache) {
    $path = libraries_get_path('leaflet');
    $file = $path . '/dist/leaflet.js';
    if (file_exists($file)) {
      drupal_add_js($file);
      drupal_add_css($path . '/dist/leaflet.css');
      $static_cache = $file;
    }
  }
  return $static_cache; 
}

/**
 * Load all Leaflet required client files and return markup for a map.
 *
 * @param array $map 
 * @param array $features 
 * @param string $height 
 * @return string map markup
 */
function leaflet_render_map($map, $features = array(), $height = '400px') {
  $map_id = 'leaflet_map_' . REQUEST_TIME;
  leaflet_load_library();
  drupal_add_js(drupal_get_path('module', 'leaflet') . '/leaflet.drupal.js');
  $settings = array(
    'mapId' => $map_id,
    'map' => $map,
    'features' => $features
  );
  drupal_add_js(array('leaflet' => array($settings)), 'setting');

  return theme('leaflet_map', array('map_id' => $map_id, 'height' => $height));
}

/**
 * Get all avaialble Leaflet map definitions.
 *
 * @param string $map
 */
function leaflet_map_get_info($map = NULL) {
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['leaflet_map_info'] = &drupal_static(__FUNCTION__);
  }
  $map_info = &$drupal_static_fast['leaflet_map_info'];
  
  if (empty($map_info)) {
    if ($cache = cache_get("leaflet_map_info")) {
      $map_info = $cache->data;
    }
    else {
      $map_info = module_invoke_all('leaflet_map_info');
      // Let other modules alter the entity info.
      drupal_alter('leaflet_map_info', $map_info);
      cache_set("leaflet_map_info", $map_info);      
    }  
  }
  
  if (empty($map)) {
    return $map_info;
  }
  elseif (isset($map_info[$map])) {
    return $map_info[$map];
  }  
}

/**
 * Implements hook_leaflet_map_info() to return a default map.
 *
 * @return array
 */
function leaflet_leaflet_map_info() {
  return array(
    'leaflet_default' =>
      array(
        'label' => 'Default',
        'description' => t('Leaflet default map.'),
        'settings' => array(
          'zoom' => 18,
          'minZoom' => 0,
          'maxZoom' => 18,
          'dragging' => TRUE,
          'touchZoom' => TRUE,
          'scrollWheelZoom' => TRUE,
          'doubleClickZoom' => TRUE,
          'zoomControl' => TRUE,
          'attributionControl' => TRUE,
          'trackResize' => TRUE,
          'fadeAnimation' => TRUE,
          'zoomAnimation' => TRUE,
          'closePopupOnClick' => TRUE,
        ),
        'layers' => array(
          'earth' => array(
            'urlTemplate' => 'http://a.tiles.mapbox.com/mapbox/1.0.0/natural-earth-1/{z}/{x}/{y}.png',
            'scheme' => 'tms'
          )
        )
    )
  );  
}
